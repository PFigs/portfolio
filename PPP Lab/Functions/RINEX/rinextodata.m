function data = rinextodata( filepath, data, type, version )
%RINEXTODATA parses a RINEX file to the used data structures
%   Several versions of RINEX can and should be supported but this code
%   was developed for version 2.11.
%   
%   INPUT
%   FILEPATH - RINEX filepath
%   TYPE     - O:observation, N:navigation, ... (can also be checked by
%              file extension)
%   VERSION  - RINEX file version
%
%   OUTPUT
%   DATA     - Structure with the parsed information
%
%   REFERENCES:
%   http://gage14.upc.es/gLAB/HTML/LaunchHTML.html
%   http://igscb.jpl.nasa.gov/igscb/data/format/rinex210.txt
%   http://igscb.jpl.nasa.gov/igscb/data/format/rinex211.txt
%
%   TO FOLLOW UP:   
%   The WAVELENGTH FACT L1/2 header record defining the factor, the carrier
%   wavelength has to be divided with for ambiguity resolution, has been
%   introduced because of receivers generating GPS phase observations under
%   antispoofing with one cycle corresponding to half the carrier wavelength
%   only (squaring technique). Galileo observables will not be generated by
%   squaring. We therefore define the WAVELENGTH FACT L1/2 header record to be
%   valid for L1 and L2 GPS phase observables only. All wavelength factors default
%   to 1. This header record can therefore be declared to be optional.
%
%   TO DO:
%   ADD RINEX CLOCK AND SINEX TO THIS FUNCTION
%
%   Pedro Silva, Instituto Superior TÃ©cnico, June 2012

    % Open file and read file
    fid = fopen(filepath);
    if fid == -1
       error(['readigs: file not found: ' sprintf('%s',filepath)]); 
    end
    file  = textscan(fid,'%s','Delimiter','\n','whitespace','');
    fclose(fid);
    file  = file{1};
    fSize = size(file,1);

    % Search for header end
    count = 0;
    for k=1:fSize
        count = count+1;
        
        idx = strfind(file{k},'RINEX VERSION / TYPE');
        if ~isempty(idx)
            info    = regexp(file{k}(1:idx-1),'\s*','split');
            info(1) = [];
            version = str2double(info{1});
            type    = info{2}(1);
        end
        
        idx = strfind(file{k},'# / TYPES OF OBSERV');
        if ~isempty(idx)
            obs    = regexp(file{k}(1:idx-1),'\s*','split');
            obs(1) = [];
            nObs   = str2double(obs{1});
            obs(1) = [];
        end
        
        idx = strfind(file{k},'APPROX POSITION XYZ');
        if ~isempty(idx)
            info          = regexp(file{k}(1:idx-1),'\s*','split');
            info(1)       = [];
            refpoint      = zeros(1,3);
            refpoint(1,1) = str2double(info{1});
            refpoint(1,2) = str2double(info{2});
            refpoint(1,3) = str2double(info{3});
            data.refpoint = refpoint;
        end
        
        idx = strfind(file{k},'END OF HEADER');
        if ~isempty(idx)            
            break;
        end
    end
    
    % SWITCH FILE TYPE
    if strcmpi(type,'O') % OBTAIN OBSERVATION
        if ~exist(['Data/',filepath(end-4:end-2),'parsedobsrinex.mat'],'file')
            data = parserinexobservation(file,k,fSize,data, obs, nObs);
            fprintf('Finished parsing observation file...\n');
            if ~exist('Data','dir')
                mkdir('Data');
            end
            save(['Data/',filepath(end-4:end-2),'parsedobsrinex.mat'],'data');
        else
            load(['Data/',filepath(end-4:end-2),'parsedobsrinex']);
        end
        
    elseif strcmpi(type,'N') % OBTAIN NAVIGATION
        if ~exist(['Data/',filepath(end-4:end-2),'parsednavrinex.mat'],'file')
            data = parserinexnavigation(file,k,fSize,data,version);
            fprintf('Finished parsing observation file...\n');
            if ~exist('Data','dir')
                mkdir('Data');
            end
            save(['Data/',filepath(end-4:end-2),'parsednavrinex.mat'],'data');
        else
            load(['Data/',filepath(end-4:end-2),'parsednavrinex.mat']);
        end
    elseif strcmpi(type,'ATX') % Read ATX file
        data = parseantex(file,k,fSize);
        fprintf('Finished parsing antenna file...\n');
        if ~exist('Data','dir')
            mkdir('Data');
        end
    end

end


